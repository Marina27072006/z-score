#include <windows.h>
#include <commdlg.h>
#include <commctrl.h>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <cmath>
#include <algorithm>
#include <map>
#include <locale>
#include <codecvt>
#include <iomanip>  // Добавлен для setprecision
#include <iostream> // Добавлен для операторов потока

#pragma comment(lib, "comctl32.lib")
#pragma comment(lib, "comdlg32.lib")

// Константы для элементов интерфейса
#define ID_LOAD_BUTTON 1001
#define ID_CALCULATE_BUTTON 1002
#define ID_SAVE_BUTTON 1003
#define ID_THRESHOLD_EDIT 1004
#define ID_COLUMN_LIST 1005
#define ID_RESULTS_LIST 1006
#define ID_SELECT_ALL_BUTTON 1007
#define ID_CLEAR_ALL_BUTTON 1008

// Глобальные переменные
HWND hMainWindow;
HWND hLoadButton, hCalculateButton, hSaveButton;
HWND hThresholdEdit, hColumnList, hResultsList;
HWND hThresholdLabel, hColumnsLabel, hResultsLabel;
HWND hSelectAllButton, hClearAllButton;

std::vector<std::vector<std::string>> csvData;
std::vector<std::string> columnNames;
std::vector<int> selectedColumns;
std::vector<std::pair<int, double>> anomalies;

// Структура для хранения результатов анализа
struct AnalysisResult {
    std::vector<double> zScores;
    std::vector<bool> isAnomaly;
    double threshold;
    int anomalyCount;
};

std::map<int, AnalysisResult> columnResults;

// Функция для конвертации std::string в std::wstring
std::wstring stringToWstring(const std::string& str) {
    if (str.empty()) return std::wstring();
    int size_needed = MultiByteToWideChar(CP_ACP, 0, &str[0], (int)str.size(), NULL, 0);
    std::wstring wstrTo(size_needed, 0);
    MultiByteToWideChar(CP_ACP, 0, &str[0], (int)str.size(), &wstrTo[0], size_needed);
    return wstrTo;
}

// Функция для конвертации std::wstring в std::string
std::string wstringToString(const std::wstring& wstr) {
    if (wstr.empty()) return std::string();
    int size_needed = WideCharToMultiByte(CP_ACP, 0, &wstr[0], (int)wstr.size(), NULL, 0, NULL, NULL);
    std::string strTo(size_needed, 0);
    WideCharToMultiByte(CP_ACP, 0, &wstr[0], (int)wstr.size(), &strTo[0], size_needed, NULL, NULL);
    return strTo;
}

// Функция для форматирования числа с заданной точностью
std::string formatDouble(double value, int precision = 4) {
    std::ostringstream oss;
    oss << std::fixed << std::setprecision(precision) << value;
    return oss.str();
}

// Улучшенная функция для разбора CSV строки
std::vector<std::string> parseCSVLine(const std::string& line) {
    std::vector<std::string> result;
    std::string current = "";
    bool inQuotes = false;

    for (size_t i = 0; i < line.length(); i++) {
        char c = line[i];

        if (c == '"') {
            inQuotes = !inQuotes;
        }
        else if ((c == ',' || c == ';') && !inQuotes) { // Поддержка как запятой, так и точки с запятой
            // Удаляем пробелы в начале и конце
            while (!current.empty() && (current.front() == ' ' || current.front() == '\t')) {
                current.erase(0, 1);
            }
            while (!current.empty() && (current.back() == ' ' || current.back() == '\t')) {
                current.pop_back();
            }
            result.push_back(current);
            current = "";
        }
        else if (c != '\r') { // Игнорируем символы возврата каретки
            current += c;
        }
    }

    // Обрабатываем последний элемент
    while (!current.empty() && (current.front() == ' ' || current.front() == '\t')) {
        current.erase(0, 1);
    }
    while (!current.empty() && (current.back() == ' ' || current.back() == '\t')) {
        current.pop_back();
    }
    result.push_back(current);

    return result;
}

// Улучшенная функция для загрузки CSV файла
bool loadCSVFile(const std::wstring& filename) {
    std::string filenameStr = wstringToString(filename);

    // Пробуем открыть файл в разных кодировках
    std::ifstream file(filenameStr, std::ios::binary);
    if (!file.is_open()) {
        return false;
    }

    csvData.clear();
    columnNames.clear();

    std::string content;
    std::string line;

    // Читаем весь файл
    file.seekg(0, std::ios::end);
    size_t fileSize = file.tellg();
    file.seekg(0, std::ios::beg);

    content.resize(fileSize);
    file.read(&content[0], fileSize);
    file.close();

    // Разбиваем на строки
    std::istringstream stream(content);
    bool firstLine = true;
    int lineCount = 0;

    while (std::getline(stream, line) && lineCount < 10000) { // Ограничиваем количество строк для безопасности
        if (line.empty()) continue;

        std::vector<std::string> row = parseCSVLine(line);

        if (row.empty()) continue;

        if (firstLine) {
            columnNames = row;
            firstLine = false;
        }
        else {
            // Дополняем строку пустыми значениями, если столбцов меньше чем в заголовке
            while (row.size() < columnNames.size()) {
                row.push_back("");
            }
            csvData.push_back(row);
        }
        lineCount++;
    }

    return !columnNames.empty();
}

// Улучшенная функция для проверки, является ли строка числом
bool isNumber(const std::string& str) {
    if (str.empty()) return false;

    std::string trimmed = str;
    // Удаляем пробелы
    trimmed.erase(0, trimmed.find_first_not_of(" \t"));
    trimmed.erase(trimmed.find_last_not_of(" \t") + 1);

    if (trimmed.empty()) return false;

    size_t start = 0;
    if (trimmed[0] == '-' || trimmed[0] == '+') start = 1;

    bool hasDecimal = false;
    for (size_t i = start; i < trimmed.length(); i++) {
        if (trimmed[i] == '.' || trimmed[i] == ',') { // Поддержка как точки, так и запятой как десятичного разделителя
            if (hasDecimal) return false;
            hasDecimal = true;
        }
        else if (!isdigit(trimmed[i])) {
            return false;
        }
    }

    return start < trimmed.length();
}

// Функция для конвертации строки в число с учетом локали
double stringToDouble(const std::string& str) {
    std::string s = str;
    // Заменяем запятую на точку для десятичного разделителя
    std::replace(s.begin(), s.end(), ',', '.');
    return std::stod(s);
}

// Функция для вычисления Z-score
AnalysisResult calculateZScore(int columnIndex, double threshold) {
    AnalysisResult result;
    result.threshold = threshold;

    std::vector<double> values;

    // Извлекаем числовые значения из столбца
    for (const auto& row : csvData) {
        if (columnIndex < (int)row.size() && isNumber(row[columnIndex])) {
            try {
                values.push_back(stringToDouble(row[columnIndex]));
            }
            catch (...) {
                // Игнорируем ошибки конвертации
            }
        }
    }

    if (values.empty()) {
        result.anomalyCount = 0;
        return result;
    }

    // Вычисляем среднее значение
    double mean = 0.0;
    for (double val : values) {
        mean += val;
    }
    mean /= values.size();

    // Вычисляем стандартное отклонение
    double variance = 0.0;
    for (double val : values) {
        variance += (val - mean) * (val - mean);
    }
    variance /= values.size();
    double stdDev = std::sqrt(variance);

    // Вычисляем Z-scores и определяем аномалии
    result.zScores.clear();
    result.isAnomaly.clear();
    result.anomalyCount = 0;

    for (double val : values) {
        double zScore = (stdDev > 0) ? (val - mean) / stdDev : 0.0;
        result.zScores.push_back(zScore);

        bool anomaly = std::abs(zScore) > threshold;
        result.isAnomaly.push_back(anomaly);

        if (anomaly) {
            result.anomalyCount++;
        }
    }

    return result;
}

// Функция для подсчета числовых значений в столбце
int countNumericValues(int columnIndex) {
    int count = 0;
    for (const auto& row : csvData) {
        if (columnIndex < (int)row.size() && isNumber(row[columnIndex])) {
            count++;
        }
    }
    return count;
}

// Функция для обновления списка столбцов
void updateColumnList() {
    SendMessage(hColumnList, LB_RESETCONTENT, 0, 0);

    for (size_t i = 0; i < columnNames.size(); i++) {
        int numericCount = countNumericValues((int)i);

        if (numericCount > 0) {
            std::string displayText = columnNames[i] + " (" + std::to_string(numericCount) + " числовых значений)";
            std::wstring wDisplayText = stringToWstring(displayText);
            LRESULT index = SendMessage(hColumnList, LB_ADDSTRING, 0, (LPARAM)wDisplayText.c_str());
            SendMessage(hColumnList, LB_SETITEMDATA, (WPARAM)index, (LPARAM)i);
        }
    }

    // Показываем информацию о загруженных данных
    std::wstring info = L"Загружено: " + std::to_wstring(csvData.size()) + L" строк, " +
        std::to_wstring(columnNames.size()) + L" столбцов";
    SetWindowText(hColumnsLabel, info.c_str());
}

// Функция для обновления списка результатов
void updateResultsList() {
    SendMessage(hResultsList, LB_RESETCONTENT, 0, 0);

    for (const auto& pair : columnResults) {
        int colIndex = pair.first;
        const AnalysisResult& result = pair.second;

        double percentage = result.zScores.empty() ? 0.0 :
            (double)result.anomalyCount / result.zScores.size() * 100.0;

        std::string summary = columnNames[colIndex] + ": " +
            std::to_string(result.anomalyCount) + " аномалий из " +
            std::to_string(result.zScores.size()) + " значений (" +
            formatDouble(percentage, 1) + "%)";

        std::wstring wSummary = stringToWstring(summary);
        SendMessage(hResultsList, LB_ADDSTRING, 0, (LPARAM)wSummary.c_str());
    }
}

// Функция для выбора всех столбцов
void selectAllColumns() {
    LRESULT count = SendMessage(hColumnList, LB_GETCOUNT, 0, 0);
    for (int i = 0; i < count; i++) {
        SendMessage(hColumnList, LB_SETSEL, TRUE, i);
    }
}

// Функция для снятия выбора со всех столбцов
void clearAllColumns() {
    LRESULT count = SendMessage(hColumnList, LB_GETCOUNT, 0, 0);
    for (int i = 0; i < count; i++) {
        SendMessage(hColumnList, LB_SETSEL, FALSE, i);
    }
}

// Функция для сохранения результатов
void saveResults() {
    OPENFILENAME ofn;
    wchar_t szFile[260] = L"results.txt";

    ZeroMemory(&ofn, sizeof(ofn));
    ofn.lStructSize = sizeof(ofn);
    ofn.hwndOwner = hMainWindow;
    ofn.lpstrFile = szFile;
    ofn.nMaxFile = sizeof(szFile) / sizeof(wchar_t);
    ofn.lpstrFilter = L"Text Files\0*.txt\0All Files\0*.*\0";
    ofn.nFilterIndex = 1;
    ofn.lpstrFileTitle = NULL;
    ofn.nMaxFileTitle = 0;
    ofn.lpstrInitialDir = NULL;
    ofn.Flags = OFN_PATHMUSTEXIST | OFN_OVERWRITEPROMPT;

    if (GetSaveFileName(&ofn)) {
        std::string filename = wstringToString(szFile);
        std::ofstream file(filename);
        if (file.is_open()) {
            file << "Результаты анализа аномалий методом Z-score\n";
            file << "==========================================\n\n";

            for (const auto& pair : columnResults) {
                int colIndex = pair.first;
                const AnalysisResult& result = pair.second;

                double percentage = result.zScores.empty() ? 0.0 :
                    (double)result.anomalyCount / result.zScores.size() * 100.0;

                file << "Столбец: " << columnNames[colIndex] << "\n";
                file << "Порог Z-score: " << formatDouble(result.threshold, 2) << "\n";
                file << "Всего значений: " << result.zScores.size() << "\n";
                file << "Количество аномалий: " << result.anomalyCount << "\n";
                file << "Процент аномалий: " << formatDouble(percentage, 2) << "%\n\n";

                file << "Детальные результаты:\n";
                file << "Строка\tЗначение\tZ-score\tАномалия\n";

                int valueIndex = 0;
                for (size_t rowIndex = 0; rowIndex < csvData.size(); rowIndex++) {
                    if (colIndex < (int)csvData[rowIndex].size() &&
                        isNumber(csvData[rowIndex][colIndex])) {

                        if (valueIndex < (int)result.zScores.size()) {
                            file << (rowIndex + 2) << "\t"
                                << csvData[rowIndex][colIndex] << "\t"
                                << formatDouble(result.zScores[valueIndex], 4) << "\t"
                                << (result.isAnomaly[valueIndex] ? "ДА" : "НЕТ") << "\n";
                            valueIndex++;
                        }
                    }
                }
                file << "\n" << std::string(50, '-') << "\n\n";
            }

            file.close();
            MessageBox(hMainWindow, L"Результаты успешно сохранены!", L"Сохранение", MB_OK | MB_ICONINFORMATION);
        }
        else {
            MessageBox(hMainWindow, L"Ошибка при сохранении файла!", L"Ошибка", MB_OK | MB_ICONERROR);
        }
    }
}

// Обработчик сообщений окна
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_CREATE: {
        // Создание элементов интерфейса
        hLoadButton = CreateWindow(L"BUTTON", L"Загрузить CSV файл",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
            20, 20, 200, 30, hwnd, (HMENU)ID_LOAD_BUTTON, NULL, NULL);

        hThresholdLabel = CreateWindow(L"STATIC", L"Порог Z-score (по умолчанию 2.0):",
            WS_VISIBLE | WS_CHILD,
            20, 70, 200, 20, hwnd, NULL, NULL, NULL);

        hThresholdEdit = CreateWindow(L"EDIT", L"2.0",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER,
            220, 68, 100, 24, hwnd, (HMENU)ID_THRESHOLD_EDIT, NULL, NULL);

        hColumnsLabel = CreateWindow(L"STATIC", L"Выберите столбцы для анализа:",
            WS_VISIBLE | WS_CHILD,
            20, 110, 400, 20, hwnd, NULL, NULL, NULL);

        hColumnList = CreateWindow(L"LISTBOX", L"",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | WS_VSCROLL | LBS_MULTIPLESEL,
            20, 135, 400, 120, hwnd, (HMENU)ID_COLUMN_LIST, NULL, NULL);

        hSelectAllButton = CreateWindow(L"BUTTON", L"Выбрать все",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
            440, 135, 100, 25, hwnd, (HMENU)ID_SELECT_ALL_BUTTON, NULL, NULL);

        hClearAllButton = CreateWindow(L"BUTTON", L"Снять выбор",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
            440, 165, 100, 25, hwnd, (HMENU)ID_CLEAR_ALL_BUTTON, NULL, NULL);

        hCalculateButton = CreateWindow(L"BUTTON", L"Рассчитать аномалии",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
            440, 200, 100, 30, hwnd, (HMENU)ID_CALCULATE_BUTTON, NULL, NULL);

        hResultsLabel = CreateWindow(L"STATIC", L"Результаты анализа:",
            WS_VISIBLE | WS_CHILD,
            20, 270, 200, 20, hwnd, NULL, NULL, NULL);

        hResultsList = CreateWindow(L"LISTBOX", L"",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | WS_BORDER | WS_VSCROLL,
            20, 295, 520, 120, hwnd, (HMENU)ID_RESULTS_LIST, NULL, NULL);

        hSaveButton = CreateWindow(L"BUTTON", L"Сохранить результаты",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
            440, 425, 100, 30, hwnd, (HMENU)ID_SAVE_BUTTON, NULL, NULL);

        // Отключаем кнопки до загрузки данных
        EnableWindow(hCalculateButton, FALSE);
        EnableWindow(hSaveButton, FALSE);
        EnableWindow(hSelectAllButton, FALSE);
        EnableWindow(hClearAllButton, FALSE);

        break;
    }

    case WM_COMMAND: {
        switch (LOWORD(wParam)) {
        case ID_LOAD_BUTTON: {
            OPENFILENAME ofn;
            wchar_t szFile[260] = { 0 };

            ZeroMemory(&ofn, sizeof(ofn));
            ofn.lStructSize = sizeof(ofn);
            ofn.hwndOwner = hwnd;
            ofn.lpstrFile = szFile;
            ofn.nMaxFile = sizeof(szFile) / sizeof(wchar_t);
            ofn.lpstrFilter = L"CSV Files\0*.csv\0Text Files\0*.txt\0All Files\0*.*\0";
            ofn.nFilterIndex = 1;
            ofn.lpstrFileTitle = NULL;
            ofn.nMaxFileTitle = 0;
            ofn.lpstrInitialDir = NULL;
            ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

            if (GetOpenFileName(&ofn)) {
                if (loadCSVFile(szFile)) {
                    updateColumnList();
                    EnableWindow(hCalculateButton, TRUE);
                    EnableWindow(hSelectAllButton, TRUE);
                    EnableWindow(hClearAllButton, TRUE);

                    std::wstring message = L"Файл успешно загружен!\n\nСтрок данных: " +
                        std::to_wstring(csvData.size()) +
                        L"\nСтолбцов: " + std::to_wstring(columnNames.size());
                    MessageBox(hwnd, message.c_str(), L"Загрузка", MB_OK | MB_ICONINFORMATION);
                }
                else {
                    MessageBox(hwnd, L"Ошибка при загрузке файла!\n\nПроверьте:\n- Файл существует\n- Файл не поврежден\n- Файл в формате CSV", L"Ошибка", MB_OK | MB_ICONERROR);
                }
            }
            break;
        }

        case ID_SELECT_ALL_BUTTON: {
            selectAllColumns();
            break;
        }

        case ID_CLEAR_ALL_BUTTON: {
            clearAllColumns();
            break;
        }

        case ID_CALCULATE_BUTTON: {
            // Получаем порог
            wchar_t thresholdText[32];
            GetWindowText(hThresholdEdit, thresholdText, sizeof(thresholdText) / sizeof(wchar_t));
            std::string thresholdStr = wstringToString(thresholdText);

            double threshold;
            try {
                // Заменяем запятую на точку для десятичного разделителя
                std::replace(thresholdStr.begin(), thresholdStr.end(), ',', '.');
                threshold = std::stod(thresholdStr);
                if (threshold <= 0) {
                    MessageBox(hwnd, L"Порог должен быть положительным числом!", L"Ошибка", MB_OK | MB_ICONERROR);
                    break;
                }
            }
            catch (...) {
                MessageBox(hwnd, L"Неверный формат порога! Используйте число (например, 2.0)", L"Ошибка", MB_OK | MB_ICONERROR);
                break;
            }

            // Получаем выбранные столбцы
            selectedColumns.clear();
            LRESULT count = SendMessage(hColumnList, LB_GETCOUNT, 0, 0);

            for (int i = 0; i < count; i++) {
                if (SendMessage(hColumnList, LB_GETSEL, i, 0) > 0) {
                    LRESULT colIndex = SendMessage(hColumnList, LB_GETITEMDATA, i, 0);
                    selectedColumns.push_back((int)colIndex);
                }
            }

            if (selectedColumns.empty()) {
                MessageBox(hwnd, L"Выберите хотя бы один столбец для анализа!", L"Предупреждение", MB_OK | MB_ICONWARNING);
                break;
            }

            // Выполняем анализ
            columnResults.clear();
            for (int colIndex : selectedColumns) {
                AnalysisResult result = calculateZScore(colIndex, threshold);
                columnResults[colIndex] = result;
            }

            updateResultsList();
            EnableWindow(hSaveButton, TRUE);

            int totalAnomalies = 0;
            for (const auto& pair : columnResults) {
                totalAnomalies += pair.second.anomalyCount;
            }

            std::wstring message = L"Анализ завершен!\n\nВсего найдено аномалий: " +
                std::to_wstring(totalAnomalies) +
                L"\nПроанализировано столбцов: " + std::to_wstring(selectedColumns.size());
            MessageBox(hwnd, message.c_str(), L"Анализ", MB_OK | MB_ICONINFORMATION);
            break;
        }

        case ID_SAVE_BUTTON: {
            saveResults();
            break;
        }
        }
        break;
    }

    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    }

    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

// Главная функция
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // Инициализация общих элементов управления
    INITCOMMONCONTROLSEX icex;
    icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
    icex.dwICC = ICC_LISTVIEW_CLASSES;
    InitCommonControlsEx(&icex);

    // Регистрация класса окна
    const wchar_t* CLASS_NAME = L"ZScoreAnomalyDetector";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);

    RegisterClass(&wc);

    // Создание главного окна
    hMainWindow = CreateWindowEx(
        0,
        CLASS_NAME,
        L"Обнаружение аномалий методом Z-score",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 580, 520,
        NULL, NULL, hInstance, NULL
    );

    if (hMainWindow == NULL) {
        return 0;
    }

    ShowWindow(hMainWindow, nCmdShow);
    UpdateWindow(hMainWindow);

    // Цикл обработки сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
